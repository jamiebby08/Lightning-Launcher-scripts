
//if ((!lat_a)&&(!lon_a)&&(!lat_b)&&(!lon_b)) {exit();};

//var dist=lat_a;

var radious = 6371000; // m
//var radious = 6371; // km, earth radious, avg
var dlat = (lat_b-lat_a) * (Math.PI / 180);
var dlon = (lon_b-lon_a) * (Math.PI / 180);
var lat_a = lat_a * (Math.PI / 180);
var lat_b = lat_b * (Math.PI / 180);

var len_a = Math.sin(dlat/2) * Math.sin(dlat/2) + Math.sin(dlon/2) * Math.sin(dlon/2) * Math.cos(lat_a) * Math.cos(lat_b); // a is the square of half the chord length between the points.

//var dist=lat_a;

//var dist_c = 2 * Math.atan2(Math.sqrt(len_a), Math.sqrt(1-a)); // c is the angular distance in radians
var dist_c = 2 * Math.asin(Math.min(1,Math.sqrt(len_a)));
// If atan2 is not available, c could be calculated from 2 ⋅ asin( min(1, √a) ) (including protec­tion against rounding errors)

var dist = radious * dist_c;

//dist=1

exit();

/*
Excel:
radious = 6371000 // m
dlat=(lat_b-lat_a)*(PI()/180)
dlon=(lon_b-lon_a)*(PI()/180)
lat_a=lat_a*(PI()/180)
lat_b=lat_b*(PI()/180)

len_a=SIN(dlat/2)*SIN(dlat/2)+SIN(dlon/2)*SIN(dlon/2)*COS(lat_a)*COS(lat_b)

dist_c=2*ATAN2(SQRT(1-len_a),SQRT(len_a))
//dist_c=2*ASIN(MIN(1,SQRT(len_a)))

dist = radious * dist_c
*/

// http://www.movable-type.co.uk/scripts/latlong.html

// http://stackoverflow.com/questions/365826/calculate-distance-between-2-gps-coordinates

Number.prototype.toRad = function() { return this * (Math.PI / 180); };


var R = 6371; // km
var dLat = (lat2-lat1).toRad();
var dLon = (lon2-lon1).toRad();
var lat1 = lat1.toRad();
var lat2 = lat2.toRad();

var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
var d = R * c;


Law of cosines:	
d = acos( sin φ1 ⋅ sin φ2 + cos φ1 ⋅ cos φ2 ⋅ cos Δλ ) ⋅ R

JavaScript:	
var φ1 = lat1.toRadians(), φ2 = lat2.toRadians(), Δλ = (lon2-lon1).toRadians(), R = 6371e3; // gives d in metres
var d = Math.acos( Math.sin(φ1)*Math.sin(φ2) + Math.cos(φ1)*Math.cos(φ2) * Math.cos(Δλ) ) * R;

Excel:	=ACOS( SIN(lat1)*SIN(lat2) + COS(lat1)*COS(lat2)*COS(lon2-lon1) ) * 6371000
(or with lat/lon in degrees):	=ACOS( SIN(lat1*PI()/180)*SIN(lat2*PI()/180) + COS(lat1*PI()/180)*COS(lat2*PI()/180)*COS(lon2*PI()/180-lon1*PI()/180) ) * 6371000
While simpler, the law of cosines is slightly slower than the haversine, in my tests.



function distance(lat1, lon1, lat2, lon2) {
  var p = 0.017453292519943295;    // Math.PI / 180
  var c = Math.cos;
  var a = 0.5 - c((lat2 - lat1) * p)/2 + 
          c(lat1 * p) * c(lat2 * p) * 
          (1 - c((lon2 - lon1) * p))/2;

  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
}


